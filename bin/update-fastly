#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

var _ = require('underscore')
var path = require('path')
var async = require('async')
var moment = require('moment')

var pgc = require('../dist/pgc')
var fls = require('../dist/fastly-log-summarizer')
var flp = require('../dist/fastly-log-parser')
var reporter = require('../dist/reporter')
var model = require('../dist/model')

var jobName = path.basename(__filename)
var runInfo = reporter.startup(jobName)

// Argument parsing
var args = require('yargs')
    .default('days_ago', 0)
    .default('match', 'releases')
    .default('overwrite', false)
    .argv

// default to X days ago
var ymd = moment().subtract(args.days_ago, 'days').format('YYYY-MM-DD')

// Allow ymd date override
if (args.ymd) {
  ymd = args.ymd
}

console.log(`Updating daily totals matching ${args.match} at ${ymd} from Fastly - ${jobName}`)

const QUERY = `
INSERT INTO dw.fc_fastly_usage (ymd, platform, version, channel, first_time, country_code, dma, ref, total)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
ON CONFLICT (ymd, platform, version, first_time, channel, country_code, dma, ref) DO UPDATE SET total = $9
`

const QUERY_MONTH = `
INSERT INTO dw.fc_fastly_calendar_month_usage (ymd, platform, version, channel, country_code, dma, ref, total)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
ON CONFLICT (ymd, platform, version, channel, country_code, dma, ref) DO UPDATE SET total = $8
`

// Set field to 'unknown' or default value if not truthy
var un = function(v, def) {
  def = def || 'unknown'
  return !v ? def : v
}

var platformConverter = function (platform) {
  if (platform === 'android') {
    return 'androidbrowser'
  }
  return platform
}

// Build function references to upsert daily stats
var buildFastlyUsageUpserter = function (pg, ymd, record) {
  record.platform = platformConverter(record.platform)
  return function (cb) {
    var params = [
      ymd,
      un(record.platform),
      un(record.version),
      un(record.channel, 'dev'),
      un(record.first),
      un(record.countryCode),
      un(record.dmaCode),
      un(record.ref, 'none'),
      record.count
    ]
    pg.query(QUERY, params, cb)
  }
}

// Build function references to upsert monthly stats
var buildFastlyMonthUsageUpserter = function (pg, ymd, record) {
  record.platform = platformConverter(record.platform)
  return function (cb) {
    var params = [
      ymd,
      un(record.platform),
      un(record.version),
      un(record.channel, 'dev'),
      un(record.countryCode),
      un(record.dmaCode),
      un(record.ref, 'none'),
      record.count
    ]
    pg.query(QUERY_MONTH, params, cb)
  }
}

// This is triggered when all resources have valid connections
var resourcesReady = function(asyncError, resources) {
  var cleanup = function () {
    // Close connection to Postgres
    resources.pg.end()
  }

  // Retrieve parsed S3 releases access records for a day
  fls.recordsForDay(ymd, args.match, function (s3err, records) {
    if (s3err) {
      throw new Error(s3err)
    }

    records = records.map(function (record) {
      if (record.version && record.version.match(new RegExp("^\\d+\\.\\d+$"))) {
        record.version += '.0'
      }
      return record
    })

    // remove records not conforming to the semver format
    records = records.filter(function (record) {
      return record.version && record.version.match(new RegExp("^\\d+\\.\\d+\\.\\d+$"))
    })

    // Select monthly records
    var monthlySummarized = flp.groupedSummaryBy(records, ['platform', 'version', 'channel', 'countryCode', 'dmaCode', 'ref'], { monthly: true })

    // Group the records by dimension list
    var summarized = flp.groupedSummaryBy(records, ['platform', 'version', 'channel', 'first', 'countryCode', 'dmaCode', 'ref'], { daily: true })

    // Build array of function to insert / update DAU into Postgres
    var dayFuncs = _.map(summarized, function (record) {
      return buildFastlyUsageUpserter(resources.pg, ymd, record)
    })

    // Build array of function to insert / update MAU (by day) into Postgres
    var monthFuncs = _.map(monthlySummarized, function (record) {
      return buildFastlyMonthUsageUpserter(resources.pg, ymd, record)
    })

    // Build the complete function list
    var allFuncs = dayFuncs.concat(monthFuncs)

    console.log('Insert or updating ' + allFuncs.length + ' records')

    // Upsert rows
    async.series(allFuncs, function(err, results) {
      if (err) {
        throw new Error(err)
      }
      if (args.overwrite) {
        overwrite(resources, ymd, function () {
          reporter.shutdown(runInfo, resources.pg, cleanup)
        })
      } else {
        reporter.shutdown(runInfo, resources.pg, cleanup)
      }
    })
  })
}

function overwrite (resources, ymd, cb) {
  console.log('Writing to dw.fc_usage and fc_usage_month from Fastly')
  model.moveFastlyToUsageForDay(resources.pg, ymd, function (errorDay) {
    console.log(errorDay)
    model.moveFastlyMonthlyToUsageForDay(resources.pg, ymd, function (errorMonth) {
      console.log(errorMonth)
      cb()
    })
  })
}

// Setup and run
async.parallel({
  pg: pgc.setup
}, resourcesReady)
