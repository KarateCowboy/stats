#!/usr/bin/env node
var db = require('../dist/mongoc')
var retriever = require('../dist/retriever')
var model = require('../dist/model')

var async = require('async')
var _ = require('underscore')
var fs = require('fs')
var pg = require('pg')

// Read a list of exception records to be added to the aggregation stream
// These can be used for external data sources not directly available,
// or for missing data segments. See misc/ folder for exceptions format.
var exceptions = []
if (fs.existsSync('./data/usage.json')) {
  JSON.parse(fs.readFileSync('./data/usage.json'))
}

// Also read exceptions from a table and insert / update
var exceptionsSQL = 'INSERT INTO dw.fc_usage ( ymd, platform, version, first_time, total ) SELECT ymd, platform, version, first_time, total from dw.fc_usage_exceptions ON CONFLICT (ymd, platform, version, first_time ) DO UPDATE SET total = EXCLUDED.total'

var makeExceptionsUpserter = function (client) {
  return function (cb) {
    client.query(exceptionsSQL, [], function (err, result) {
      cb(err)
    })
  }
}

// Connect to postgres
pg.connect(process.env.DATABASE_URL, function(err, client) {
  if (err) {
    throw new Error(err)
  }
  console.log('[OK] Connected to postgres')

  db.setup(function(connection) {
    console.log('[OK] Connected to mongo')
    // Retrieve the daily active user stats
    retriever.dailyActiveUsersFullGrouped(connection, exceptions, function(err, results) {
      console.log(results)

      // Build funcs to execute
      var funcs = _.map(results, function(row) {
        return model.usageUpserter(client, row)
      })

      // Insert / Update the exceptions
      funcs.push(makeExceptionsUpserter(client))

      // Insert rows
      async.series(funcs, function(err, results) {
        if (err) {
          throw new Error(err)
        }
        console.log('Done')
        client.end()
        connection.close()
      })
    })
  })
})
