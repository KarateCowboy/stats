#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

var async = require('async')
var _ = require('underscore')
var fs = require('fs')
var path = require('path')

var mongoc = require('../src/mongoc')
var retriever = require('../src/retriever')
var model = require('../src/model')
var reporter = require('../src/reporter')
var pgc = require('../src/pgc')

var jobName = path.basename(__filename)
var runInfo = reporter.startup(jobName)
console.log(runInfo)

console.log('Update daily totals for laptop - ' + jobName)

// This is triggered when all resources have valid connections
var resourcesReady = function(asyncError, resources) {
  var cleanup = function () {
    // Close connections to Postgres and Mongo
    resources.pg.end()
    resources.mg.close()
  }

  console.log('Connected to Mongo')
  // Retrieve the daily active user stats
  retriever.dailyActiveUsersFullGrouped(resources.mg, [], function(err, results) {
    // Build funcs to execute
    var funcs = _.map(results, function(row) {
      return model.usageUpserter(resources.pg, row)
    })

    console.log('Retrieved results from Mongo')
    console.log('Updating ' + results.length + ' rows in Postgres')

    // Insert / Update the exceptions
    funcs.push(model.exceptionsUpserter(resources.pg))

    // Insert rows
    async.series(funcs, function(err, results) {
      if (err) {
        throw new Error(err)
      }
      // Report the results of the job run
      reporter.shutdown(runInfo, resources.pg, cleanup)
    })
  })
}

// Setup and run
async.parallel({
  pg: pgc.setup,
  mg: mongoc.setup
}, resourcesReady)
