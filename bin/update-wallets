#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

const _ = require('underscore')
const commander = require('commander')
const reporter = require('../src/reporter')
const Knex = require('knex')
const Sequelize = require('sequelize')
const pg = require('pg')
const jobName = 'update-wallets'

const main = async () => {
  let runInfo = reporter.startup(jobName)
  await setup()
  const WalletsService = require('../src/services/wallets.service')
  const walletService = new WalletsService()
  try {
    await knex('dw.fc_wallets').truncate()
    await walletService.updateFromLedger(commander.daysback)
  } catch (e) {
    console.log(`Error running ${jobName}:`)
    console.log('    ', e.message)
    process.exit(1)
  }
  await reporter.complete(runInfo, pg_client)
  process.exit(0)
}

setup = async () => {
  if(!!!process.env.LEDGER_HOST){
    console.log(`LEDGER_HOST must be set. Exiting`)
    process.exit(1)
  }
  if(!!!process.env.LEDGER_TOKEN){
    console.log(`LEDGER_TOKEN must be set. Exiting`)
    process.exit(1)
  }
  global.knex = await Knex({client: 'pg', connection: process.env.DATABASE_URL})
  global.pg_client = await pg.connect(process.env.DATABASE_URL)
  global.sequelize = new Sequelize(process.env.DATABASE_URL)

}

commander.option('-d --daysback [num]', 'Days to go back in fetching').parse(process.argv)
main()
