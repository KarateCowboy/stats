var request = require('request')

var csv = require('../dist/csv-import')
var pgc = require('../dist/pgc')

if (!process.env.FABRIC_SESSION) {
  throw new Error("The FABRIC_SESSION environment variable must be set to the contents of the Fabric _fabric_session cookie. Warning! this value is generally valid for two weeks only.")
}

if (!process.env.FABRIC_ANDROID_PROJECT_ID) {
  throw new Error("The FABRIC_ANDROID_PROJECT_ID environment variable must be set.")
}

// Note: We are taking the version as a parameter to this script. This will need to be updated everytime we release a new
// version of the browser. TODO - investigate a way to retrieve the most current version number for this script to be
// fully automatic.
var args = require('yargs')
    .demand(['platform', 'version'])
    .argv

// Valid platform identifiers
var platforms = {
  'android': process.env.FABRIC_ANDROID_PROJECT_ID,
  'ios': process.env.FABRIC_IOS_PROJECT_ID || null
}

if (!platforms[args.platform]) {
  throw new Error('Invalid platform ' + args.platform)
}

var FABRIC_URL = "https://fabric.io/api/v3/projects/PROJECT_ID/answers_csv/dau_csv?start=START&end=END&build=all"
var PROJECT_ID = platforms[args.platform]

// Retrieve CSV data from Fabric
var retrieveFabricCSV = function (done) {
  var end = parseInt((new Date()).getTime() / 1000, 10)
  var start = end - (365 * 24 * 60 * 60)
  var url = FABRIC_URL
  url = url.replace('PROJECT_ID', PROJECT_ID)
  url = url.replace('START', start)
  url = url.replace('END', end)

  var options = {
    url: url,
    method: 'GET',
    headers: {
      Cookie: '_fabric_session=' + process.env.FABRIC_SESSION,
      'Upgrade-Insecure-Requests': 1
    }
  }

  request(
    options,
    function (err, results, body) {
      if (err) {
        throw new Error(err.toString())
      }
      done(body)
    }
  )
}

var removeAllEntriesForPlatform = function (client, platform, done) {
  client.query('DELETE FROM dw.fc_usage WHERE platform = $1', [platform], done)
}

// Read, parse and insert DAU into Postgres
pgc.setup(function(client) {
  retrieveFabricCSV(function(contents) {
    removeAllEntriesForPlatform(client, args.platform, function(deleteError, result) {
      if (deleteError) {
        throw new Error(deleteError.toString())
      }
      csv.import(client, contents, args.platform, args.version, function (err) {
        if (err) {
          throw new Error(err.toString())
        }
        client.end()
      })
    })
  })
})
