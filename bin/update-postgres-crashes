#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

var async = require('async')
var _ = require('underscore')
var path = require('path')

var retriever = require('../src/retriever')
var model = require('../src/model')
var reporter = require('../src/reporter')
var pgc = require('../src/pgc')
var mongoc = require('../src/mongoc')
var common = require('../src/api/common')

var channels = _.object(common.allChannels.map((c) => { return [c, {}] }))

console.log('Update daily crash totals for laptop')

var jobName = path.basename(__filename)
var runInfo = reporter.startup(jobName)

function resourcesReady (setupError, resources) {
  var cleanup = function () {
    // Close connections to Postgres and Mongo
    resources.pg.end()
    resources.mg.close()
  }

  var resultsHandler = function (err, results) {
    if (err) throw err

    // only attempt to insert rows with valid version formats
    results = results.filter((row) => { return row._id.version.match(/^\d+\.\d+\.\d+$/) })

    // only keep rows with valid channel identifiers
    results = results.filter((row) => { return !!channels[row._id.channel] })

    // Build funcs to execute
    var funcs = _.map(results, function(row) {
      return model.crashUpserter(resources.pg, row)
    })

    console.log("Updating " + results.length + " rows")

    // Insert rows
    async.series(funcs, function(err, results) {
      if (err) {
        throw new Error(err)
      }
      // Report the results of the job run
      reporter.shutdown(runInfo, resources.pg, cleanup)
    })
  }

  retriever.dailyCrashReportsFullGrouped(resources.mg, resultsHandler)
}

// Setup and run
async.parallel({
  pg: pgc.setup,
  mg: mongoc.setup
}, resourcesReady)
