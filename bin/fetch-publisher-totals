#!/usr/bin/env node
/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

const Script = require('./script')
const _ = require('lodash')
const ChannelTotal = require('../src/models/channel_total.model')()
const PublisherTotal = require('../src/models/publisher_total.model')()
const common = require('../src/api/common')
const path = require('path')

class FetchPublishers extends Script {

  async run () {
    await this.setup('fetch-publisher-totals')
    const args = this.yargs.default('day', this.moment().format('YYYY-MM-DD')).argv
    const channel_options = {
      method: 'GET',
      url: `${process.env.PUBLISHER_API_URL}/api/v1/public/channels/totals`,
    }
    let api_result
    try {
      api_result = await common.prequest(channel_options)
      const channel_total = new ChannelTotal(JSON.parse(api_result))
      await channel_total.save()
    } catch (e) {
      console.log(`Error retrieving channels data from publishers API`)
      console.log(e.message)
      process.exit(1)
    }

    const publisher_options = {
      method: 'GET',
      url: `${process.env.PUBLISHER_API_URL}/api/v1/stats/publishers/totals`,
      headers: {
        Authorization: `Token token=${process.env.PUBLISHERS_TOKEN}`
      }
    }
    if (!process.env.LOCAL) {
      const ProxyAgent = require('proxy-agent')
      console.log('configuring proxy agent')
      publisher_options.agent = new ProxyAgent(process.env.FIXIE_URL)
    }
    try {
      api_result = await common.prequest(publisher_options)
      const publisher_total = new PublisherTotal(JSON.parse(api_result))
      await publisher_total.save()
    } catch (e) {
      console.log('Error retrieving Publisher Totals from publishers API')
      console.log(e.message)
      console.dir(api_result, {colors: true})
      process.exit(1)
    }

    const today = this.moment(args.day).format('YYYY-MM-DD')
    let attrsSet
    try {
      if (args.end) {
        console.log('running for set')
        attrsSet = await db.PublisherSignupDay.buildFromRemote(args.end, today)
      } else {
        attrsSet = await db.PublisherSignupDay.buildFromRemote(today)
        attrsSet = [attrsSet]
      }
      await db.PublisherSignupDay.query().whereIn('ymd', attrsSet.map(i => i.ymd)).delete()
      await db.PublisherSignupDay.query().insert(attrsSet)
    } catch (e) {
      console.log(`Error writing PublisherSignupDay for date ${today} to database`)
      console.log(e.message)
    }

    await this.shutdown()
  }
}

const fetch_publishers = new FetchPublishers(path.basename(__filename))

fetch_publishers.run()
