#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

var async = require('async')
var _ = require('underscore')
var path = require('path')

var pgc = require('../src/pgc')
var publishers = require('../src/publishers')
var reporter = require('../src/reporter')

var jobName = path.basename(__filename)
var runInfo = reporter.startup(jobName)

const PUBLISHER_URL = process.env.PUBLISHER_URL
if (!PUBLISHER_URL) {
  console.log("PUBLISHER_URL required")
  process.exit(1)
}

console.log('Update eyeshade publisher counts ' + jobName)

const QUERY = `
INSERT INTO dw.fc_daily_publishers (ymd, total, verified, authorized, irs)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (ymd) DO UPDATE SET
  total = $2,
  verified = $3,
  authorized = $4,
  irs = $5
`

const INSERT_PUBLISHER = `
INSERT INTO dtl.publishers ( publisher, name, url, created, created_at, verified, authorized, platform, provider ) VALUES ( $1, $2, $3, $4, $5, $6, $7, $8, $9 ) ON CONFLICT (publisher) DO UPDATE SET name = $2, url = $3, created = $4, created_at = $5, verified = $6, authorized = $7, platform = $8, provider = $9
`

// This is triggered when all resources have valid connections
var resourcesReady = async function (asyncError, resources) {
  var cleanup = function () {
    // Close connections to Postgres
    resources.pg.end()
  }

  publishers.all(PUBLISHER_URL, async function (err, ymdRows, publishers) {
    var publisher, i
    console.log("Inserting or updating publishers")
    for (i = 0; i < publishers.length; i++) {
      publisher = publishers[i]
      if (publisher.publisher.match(/^youtube\#/)) {
        var [channel, identifier] = publisher.publisher.split('#')[1].split(':')
        publisher.url = `https://youtube.com/${channel}/${identifier}`
        publisher.platform = 'youtube'
      } else if (publisher.publisher.match(/^twitch\#/)) {
        var [channel, identifier] = publisher.publisher.split('#')[1].split(':')
        publisher.url = `https://www.twitch.tv/${identifier}`
        publisher.platform = 'twitch'
      } else {
        publisher.url = `https://${publisher.publisher}`
        publisher.platform = 'publisher'
      }
      await resources.pg.query(INSERT_PUBLISHER, [publisher.publisher, publisher.name, publisher.url, publisher.created, publisher.created_at, publisher.verified, publisher.authorized, publisher.platform, publisher.provider])
    }
    console.log(`Insert or updated ${publishers.length} publisher records`)
    var funcs = ymdRows.map((row) => {
      return (cb) => {
        resources.pg.query(QUERY, [row.ymd, row.total || 0, row.verified, row.authorized, row.irs], cb)
      }
    })
    async.series(funcs, (asyncErr, results) => {
      if (asyncErr) { throw new Error(asyncErr) }
      console.log('Updated ' + ymdRows.length + ' publisher daily records')
      // Report the results of the job run
      reporter.shutdown(runInfo, resources.pg, cleanup)
    })
  })
}

// Setup and run
async.parallel({
  pg: pgc.setup
}, resourcesReady)
