#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

var async = require('async')
var _ = require('underscore')
var path = require('path')

var pgc = require('../dist/pgc')
var publishers = require('../dist/publishers')
var reporter = require('../dist/reporter')

var jobName = path.basename(__filename)
var runInfo = reporter.startup(jobName)

console.log('Update eyeshade publisher counts ' + jobName)

const QUERY = `
INSERT INTO dw.fc_daily_publishers (ymd, total, verified, authorized, irs)
VALUES ($1, $2, $3, $4, $5)
ON CONFLICT (ymd) DO UPDATE SET
  total = $2,
  verified = $3,
  authorized = $4,
  irs = $5
`

// This is triggered when all resources have valid connections
var resourcesReady = function(asyncError, resources) {
  var cleanup = function () {
    // Close connections to Postgres
    resources.pg.end()
  }

  publishers.all(function (err, ymdRows) {
    var funcs = ymdRows.map((row) => {
      return (cb) => {
        resources.pg.query(QUERY, [row.ymd, row.total || 0, row.verified, row.authorized, row.irs], cb)
      }
    })
    async.series(funcs, (asyncErr, results) => {
      if (asyncErr) { throw new Error(asyncErr) }
      console.log('Updated ' + ymdRows.length + ' publisher daily records')
      // Report the results of the job run
      reporter.shutdown(runInfo, resources.pg, cleanup)
    })
  })
}

// Setup and run
async.parallel({
  pg: pgc.setup
}, resourcesReady)
