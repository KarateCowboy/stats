#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

/*

  Read and re-send messages for unprocessed crashes
  over a specified date range (that do not contain a signature)

*/

const async = require('async')

const pgc = require('../src/pgc')
const amqpc = require('../src/amqpc')

var start = process.argv[2]
var end = process.argv[3]
var limit = parseInt(process.argv[4] || 10)

if (!(start && end)) {
  throw new Error('start and end dates in yyyy-mm-dd must be provided as the first two parameters')
}

// Build a crash processing function
function buildProcessCrashReporter (channel, contents) {
  return function (cb) {
    // Retrieve from the S3 and stack walk the crash report
    if (!process.env.DRY_RUN) {
      console.log(`Sending id ${contents._id}`)
      amqpc.send(contents, channel)
    } else {
      console.log(`Dry run, not sending id ${contents._id}`)
    }
    cb(null)
  }
}

const CRASHES_YMD_QUERY = `
SELECT *
FROM dtl.crashes
WHERE
  ( contents->>'year_month_day' >= $1 AND contents->>'year_month_day' <= $2 )
  AND contents->'metadata'->>'signature' IS NULL
ORDER BY ts ASC
`

// Connect to Postgres
function resourcesReady (err, resources) {
  if (err) {
    throw new Error(err)
  }

  // find unprocessed crash reports within a date range
  resources.pg.query(CRASHES_YMD_QUERY, [start, end], function (queryError, results) {
    if (queryError) {
      throw new Error(queryError)
    }
    if (results.rows.length === 0) {
      console.log("No unprocessed crash reports in date range ", [start, end])
      process.exit(0)
    }

    console.log(results.rows.length + ' unprocessed crash reports in this date range. Processing ' + limit + '.')

    // Limit to a set number of records
    if (results.rows.length > limit) {
      results.rows = results.rows.slice(0, limit)
    }

    // build function handlers
    var funcs = results.rows.map(function (row) {
      return buildProcessCrashReporter(resources.ch, row.contents)
    })

    // execute the function handlers and exit
    async.series(funcs, function (asyncError, results) {
      if (asyncError) {
        console.log(asyncError.toString())
      }
      setTimeout(function() {
        console.log('Done')
        resources.pg.end()
        process.exit(0)
      }, 1000)
    })
  })
}

// Startup, connect to all required resources and start processing
async.parallel({
  pg: pgc.setup,
  ch: amqpc.setup
}, resourcesReady)
