#!/usr/bin/env node

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/. */

const mongoc = require('../src/mongoc')
const mongoose = require('mongoose')
const pgc = require('../src/pgc')
const reporter = require('../src/reporter')
const moment = require('moment')
const ReferralCode = require('../src/models/referral-code.model')()
const Knex = require('knex')
const path = require('path')


const validCollections = ['usage', 'android_usage', 'ios_usage', 'brave_core_usage']

const main = async () => {
  const jobName = path.basename(__filename)
  const runInfo = reporter.startup(jobName)
  global.mongo_client = await mongoc.setupConnection()
  await mongoose.connect(process.env.MLAB_URI)

  for(let collection of validCollections){
    const ref_codes = await mongo_client.collection(collection).distinct('ref')
    await ReferralCode.add_missing(ref_codes, 'androidbrowser')
  }

  try {
    runInfo.duration = ((new Date()).getTime() - runInfo.ts) / 1000
    console.log(`'${runInfo.id}' complete - ${runInfo.duration} seconds`)
    await pg_client.query('INSERT INTO dtl.runinfo ( id, duration ) VALUES ( $1, $2 )', [runInfo.id, runInfo.duration])
    await pg_client.query('DELETE FROM dtl.runinfo WHERE ts < current_timestamp - \'14 days\'::interval AND id = $1', [runInfo.id])
  } catch (e) {
    console.log('error: ' + e)
  }
  await global.mongo_client.close()
  process.exit()
}

main()
